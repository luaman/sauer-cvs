// standard shader definitions

shader "stdworld" [

!!ARBvp1.0
ATTRIB opos = vertex.position; 
OUTPUT spos = result.position; 
DP4 spos.x, state.matrix.mvp.row[0], opos; 
DP4 spos.y, state.matrix.mvp.row[1], opos; 
DP4 spos.z, state.matrix.mvp.row[2], opos; 
DP4 spos.w, state.matrix.mvp.row[3], opos;
DP3 result.texcoord[0].x, opos, program.env[0];
DP3 result.texcoord[0].y, opos, program.env[1];
MOV result.texcoord[1], vertex.texcoord[1];
END

] [

!!ARBfp1.0
TEMP diffuse, lm;
TEX lm,      fragment.texcoord[0], texture[0], 2D;
TEX diffuse, fragment.texcoord[1], texture[1], 2D;
MUL lm, lm, 2;
MUL result.color, lm, diffuse;
END

]


shader "stdmodel" [

!!ARBvp1.0
ATTRIB opos = vertex.position; 
ATTRIB onormal = vertex.normal; 
OUTPUT spos = result.position;
OUTPUT wnormal = result.texcoord[1]; 
DP4 spos.x, state.matrix.mvp.row[0], opos; 
DP4 spos.y, state.matrix.mvp.row[1], opos; 
DP4 spos.z, state.matrix.mvp.row[2], opos; 
DP4 spos.w, state.matrix.mvp.row[3], opos;
MOV result.texcoord[0], vertex.texcoord[0];
MOV wnormal, onormal;
MOV result.color, vertex.color;
END

] [

!!ARBfp1.0
ATTRIB normal = fragment.texcoord[1];
TEMP diffuse, rnormal, light;

DP3 rnormal.w, normal, normal;
RSQ rnormal.w, rnormal.w;
MUL rnormal.xyz, rnormal.w, normal;

DP3 light, rnormal, program.env[0];
#MUL light, light, fragment.color;
#MOV light, fragment.color;
MAX light, light, { 0.25, 0.25, 0.25 };
MOV light.w, 1;

TEX diffuse, fragment.texcoord[0], texture[0], 2D;
MUL result.color, light, diffuse;
END

]


// 

