// standard shader definitions

alias vpstart [
	!!ARBvp1.0
	ATTRIB opos = vertex.position; 
	OUTPUT spos = result.position; 
	DP4 spos.x, state.matrix.mvp.row[0], opos; 
	DP4 spos.y, state.matrix.mvp.row[1], opos; 
	DP4 spos.z, state.matrix.mvp.row[2], opos; 
	DP4 spos.w, state.matrix.mvp.row[3], opos;
]

macro normalize [
	DP3 %1.w, %2, %2;
	RSQ %1.w, %1.w;
	MUL %1.xyz, %1.w, %2;
]

///////////////////////////////////////////////////
//
// used for any textured polys that don't have a shader set
//
///////////////////////////////////////////////////

shader "default" [		
	@vpstart
	MOV result.texcoord[0], vertex.texcoord[0];
	MOV result.color, vertex.color;
	END
] [
	!!ARBfp1.0
	TEMP diffuse;
	TEX diffuse, fragment.texcoord[0], texture[0], 2D;
	MUL result.color, fragment.color, diffuse;
	END
]

//////////////////////////////////////////////////////////////////////
//
// same, but now without texture sampling (some HUD stuff needs this)
//
//////////////////////////////////////////////////////////////////////

shader "notexture" [		
	@vpstart
	MOV result.color, vertex.color;
	END
] [
	!!ARBfp1.0
	MOV result.color, fragment.color;
	END
]

////////////////////////////////////////////////////////
//
// default lightmapped world shader.. does texcoord gen
//
///////////////////////////////////////////////////////


alias worldshader [
	shader $arg1 [
		@vpstart
		DP3 result.texcoord[0].x, opos, program.env[0];
		DP3 result.texcoord[0].y, opos, program.env[1];
		DP3 result.texcoord[1].x, state.matrix.texture[1].row[0], vertex.texcoord[1];
		DP3 result.texcoord[1].y, state.matrix.texture[1].row[1], vertex.texcoord[1];
		DP4 result.fogcoord, -opos, state.matrix.modelview.row[2];
		MOV result.color, vertex.color;
		END
	] [
		!!ARBfp1.0
		OPTION ARB_fog_linear;
		TEMP diffuse, lm;
		TEX diffuse, fragment.texcoord[0], texture[0], 2D;
		TEX lm,      fragment.texcoord[1], texture[1], 2D;
		@arg2
		MUL diffuse, diffuse, 2;
		MUL diffuse, diffuse, fragment.color;	# only really needed for showva atm 
		MUL result.color, diffuse, lm;
		END
	]
]

worldshader "stdworld" ""
worldshader "decalworld" [
	TEMP decal;
	TEX decal,   fragment.texcoord[0], texture[2], 2D;
	LRP diffuse, decal.w, decal, diffuse;
]




////////////////////////////////////////////////
//
// phong lighting model shader
//
////////////////////////////////////////////////

alias modelshader [
	alias col $arg2		// overridden by normalize, ugh
	shader $arg1 [
		@vpstart
		ATTRIB onormal = vertex.normal; 
		PARAM ocampos = program.env[1];
		PARAM lightdir = program.env[0];
		OUTPUT wnormal = result.texcoord[1]; 
		TEMP halfangle;
		MOV result.texcoord[0], vertex.texcoord[0];
		MOV wnormal, onormal;
		MOV result.color, vertex.color;
		SUB halfangle, ocampos, opos;
		@[normalize halfangle halfangle]
		ADD result.texcoord[3], lightdir, halfangle;
		MOV result.texcoord[2], lightdir;
		DP4 result.fogcoord, -opos, state.matrix.modelview.row[2];
		END
	] [
		!!ARBfp1.0
		OPTION ARB_fog_linear;
		ATTRIB normal = fragment.texcoord[1];
		ATTRIB lightdir = fragment.texcoord[2];
		ATTRIB halfangle = fragment.texcoord[3];
		PARAM specintensity = program.env[2];
		PARAM ambient = program.env[3];
		TEMP diffuse, rnormal, rhalfangle, light, spec, x;

		@[normalize rhalfangle halfangle]
		@[normalize rnormal normal]

		DP3_SAT spec, rhalfangle, rnormal;
		MOV x, 128;
		POW spec, spec.x, x.x;
		MUL spec, spec, specintensity;

		DP3_SAT light, rnormal, lightdir;

		@arg3
		
		MUL light, light, 1.5;
		MAX light, light, ambient;

		TEX diffuse, fragment.texcoord[0], texture[0], 2D;
		MAD light, light, diffuse, spec;
		MUL result.color, light, @col; 
		END
	]
]

modelshader "stdppmodel" "fragment.color" ""
modelshader "masksppmodel" "color" [			# specmap & glowmap version
	TEMP masks, color;
	TEX masks, fragment.texcoord[0], texture[1], 2D;
	ADD_SAT color, fragment.color, masks.yyyy;	# glowmap in green channel FIXME only do this once
	LRP light, masks.yyyy, 2, light;			# glowmap in green channel
	MUL spec, spec, masks.x;					# specmap in red channel
] 

////////////////////////////////////////////////
//
// gourad lighting model shader: cheaper, non-specular version for vegetation etc. gets used when spec==0
//
////////////////////////////////////////////////

shader "nospecpvmodel" [
	@vpstart
	ATTRIB onormal = vertex.normal; 
	PARAM ocampos = program.env[1];
	PARAM lightdir = program.env[0];
	PARAM ambient = program.env[3];
	TEMP light;

	MOV result.texcoord[0], vertex.texcoord[0];

	DP3 light, onormal, lightdir;
	MUL light, light, 1.5;
	MAX light, light, ambient;
	MUL result.texcoord[1], light, vertex.color;

	DP4 result.fogcoord, -opos, state.matrix.modelview.row[2];
	END
] [
	!!ARBfp1.0
	OPTION ARB_fog_linear;
	ATTRIB light = fragment.texcoord[1];
	TEMP diffuse;

	TEX diffuse, fragment.texcoord[0], texture[0], 2D;
	MUL result.color, light, diffuse;
	END
]



////////////////////////////////////////////////
//
// full screen shaders: 
//
////////////////////////////////////////////////


alias fsvs [
	!!ARBvp1.0
	MOV result.position, vertex.position;   # woohoo, no mvp :) 
	MOV result.texcoord[0], vertex.texcoord[0];
]

alias fsps [
	!!ARBfp1.0
	TEMP sample;
	TEX sample, fragment.texcoord[0], texture[0], RECT;
]

alias setup4corners [
	ADD result.texcoord[1], vertex.texcoord[0], { -1, -1, 0, 0 };		
	ADD result.texcoord[2], vertex.texcoord[0], {  1, -1, 0, 0 };		
	ADD result.texcoord[3], vertex.texcoord[0], { -1,  1, 0, 0 };		
	ADD result.texcoord[4], vertex.texcoord[0], {  1,  1, 0, 0 };		
]

alias sample4corners [
	TEMP s00, s02, s20, s22;
	TEX s00, fragment.texcoord[1], texture[0], RECT;
	TEX s02, fragment.texcoord[2], texture[0], RECT;
	TEX s20, fragment.texcoord[3], texture[0], RECT;
	TEX s22, fragment.texcoord[4], texture[0], RECT;
]

// some simple ones that just do an effect on the RGB value...

shader "invert" [ @fsvs END ] [ @fsps SUB result.color, 1, sample;   END ]
shader "gbr"    [ @fsvs END ] [ @fsps MOV result.color, sample.yzxw; END ]

// sobel

shader "sobel"  [ @fsvs @setup4corners END ] [
	@fsps
	@sample4corners

	TEMP t, u;

	ADD t, s00, s20;
	SUB t, t, s02;
	SUB t, t, s22;
	MUL t, t, t;

	ADD u, s00, s02;
	SUB u, u, s20;
	SUB u, u, s22;
	MUL u, u, u;

	ADD t, t, u;

	ADD result.color, sample, t;
	END
]


// bloom-ish

shader "bloom_scale"   [ @fsvs @setup4corners END ] [
	@fsps
	@sample4corners

	TEMP t;
	ADD t, s02, s00;
	ADD t, s22, t;
	ADD t, s20, t;
	ADD t, t, sample;
	MUL t, t, 0.2;
	MUL result.color, t, t; 
	END
]

shader "bloom"   [ 
    @fsvs
    TEMP tc;
    MOV tc, vertex.texcoord[0];
    @[alias s ""; loop 6 [concat $s "MUL tc, tc, 0.5; MOV result.texcoord[" (+ $i 1) "], tc;"]]
    END
] [
	@fsps
	TEMP scaled;
    @[alias s ""; 
      loop 6 [
        format [ 
            %0
            TEX scaled, fragment.texcoord[%1], texture[%1], RECT;
            MAD sample, scaled, %1, sample;
        ] (+ $i 1)
      ]
    ]
	MOV result.color, sample;
	END
]

